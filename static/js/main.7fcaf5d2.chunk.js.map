{"version":3,"sources":["types/SelectValues.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","utils/todosFiltering.ts","index.tsx"],"names":["SelectValues","TodoList","todos","getActiveTodo","activeTodo","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","selectedFilterValue","setSelectedFilterValue","setSearchValue","searchValue","value","onChange","event","target","Object","entries","key","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","closeDetails","userId","useState","isLoaded","setIsLoaded","email","name","phone","selectedUser","setSelectedUser","useEffect","getUser","user","href","App","todosFromServer","setTodosFromServer","selectedTodo","setSelectedTodo","All","error","setError","todosAfterSelect","useMemo","filter","Completed","Active","todosAfterSearch","trim","length","toLowerCase","includes","catch","errorMessage","finally","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7fcaf5d2.chunk.js","sourcesContent":["export enum SelectValues {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  getActiveTodo: (todo: Todo) => void;\n  activeTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    getActiveTodo,\n    activeTodo,\n  },\n) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n    <tbody>\n      {\n        todos.map((todo) => (\n          <tr\n            data-cy=\"todo\"\n            className={classNames(\n              { 'has-background-info-light': todo.id === activeTodo?.id },\n            )}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed\n                && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames(\n                  {\n                    'has-text-success': todo.completed,\n                    'has-text-danger': !todo.completed,\n                  },\n                )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => getActiveTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far',\n                    {\n                      'fa-eye': todo.id !== activeTodo?.id,\n                      'fa-eye-slash': todo.id === activeTodo?.id,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))\n      }\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport { SelectValues } from '../../types/SelectValues';\n\ntype Props = {\n  selectedFilterValue: string,\n  setSelectedFilterValue: (value: SelectValues) => void,\n  setSearchValue: (completed: string) => void,\n  searchValue: string,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  selectedFilterValue,\n  setSelectedFilterValue,\n  setSearchValue,\n  searchValue,\n}) => {\n  const handlerChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedFilterValue(event.target.value as SelectValues);\n  };\n\n  const handlerChangeSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(event.target.value);\n  };\n\n  const handleClearSearch = () => {\n    setSearchValue('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedFilterValue}\n            onChange={handlerChangeSelect}\n          >\n            {\n              Object.entries(SelectValues).map(([key, value]) => (\n                <option\n                  key={key}\n                  value={value}\n                >\n                  {key}\n                </option>\n              ))\n            }\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchValue}\n          onChange={handlerChangeSearch}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {searchValue && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearSearch}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo,\n  closeDetails: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, closeDetails }) => {\n  const {\n    id,\n    userId,\n    completed,\n    title,\n  } = todo;\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User>({\n    email: '',\n    id: 0,\n    name: '',\n    phone: '',\n  });\n\n  useEffect(() => {\n    getUser(userId)\n      .then(user => {\n        setSelectedUser(user);\n        setIsLoaded(true);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isLoaded ? (\n        <Loader />\n      )\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                Todo #\n                {id}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={closeDetails}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n                {' by '}\n\n                <a href={`mailto: ${selectedUser.email}`}>\n                  {selectedUser.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { filteringBySearch, filteringBySelect } from './utils/todosFiltering';\nimport { SelectValues } from './types/SelectValues';\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [selectedFilterValue,\n    setSelectedFilterValue] = useState(SelectValues.All);\n  const [searchValue, setSearchValue] = useState('');\n  const [error, setError] = useState('');\n  const getActiveTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const todosAfterSelect = useMemo(() => {\n    return filteringBySelect(todosFromServer, selectedFilterValue);\n  }, [todosFromServer, selectedFilterValue]);\n\n  const todosAfterSearch = useMemo(() => {\n    return filteringBySearch(todosAfterSelect, searchValue);\n  }, [searchValue, todosAfterSelect]);\n\n  const closeDetails = () => {\n    setSelectedTodo(null);\n  };\n\n  useEffect(() => {\n    getTodos()\n      .then(todos => {\n        setTodosFromServer(todos);\n        setIsLoaded(true);\n      })\n      .catch(errorMessage => setError(`smth happens - ${errorMessage}`))\n      .finally(() => setIsLoaded(true));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedFilterValue={selectedFilterValue}\n                setSelectedFilterValue={setSelectedFilterValue}\n                setSearchValue={setSearchValue}\n                searchValue={searchValue}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isLoaded && <Loader />}\n              <TodoList\n                todos={todosAfterSearch}\n                getActiveTodo={getActiveTodo}\n                activeTodo={selectedTodo}\n              />\n            </div>\n            {error && (\n              <span style={{ color: 'red' }}>\n                {error}\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          closeDetails={closeDetails}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { SelectValues } from '../types/SelectValues';\n\nexport const filteringBySelect = (todos: Todo[], value: string) => {\n  return todos.filter(todo => {\n    switch (value as SelectValues) {\n      case SelectValues.Completed:\n        return todo.completed;\n      case SelectValues.Active:\n        return !todo.completed;\n      default:\n        return true;\n    }\n  });\n};\n\nexport const filteringBySearch = (todos: Todo[], value: string) => {\n  if (!value.trim().length) {\n    return todos;\n  }\n\n  return todos.filter((todo) => {\n    return todo.title.toLowerCase().includes(value.toLowerCase());\n  });\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}